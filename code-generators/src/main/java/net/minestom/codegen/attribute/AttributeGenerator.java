package net.minestom.codegen.attribute;

import com.google.gson.JsonObject;
import com.squareup.javapoet.*;
import net.minestom.codegen.MinestomCodeGenerator;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.lang.model.element.Modifier;
import java.io.File;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static net.minestom.codegen.util.GenerationHelper.VARIABLE_SETTER;

public final class AttributeGenerator extends MinestomCodeGenerator {
    private static final Logger LOGGER = LoggerFactory.getLogger(AttributeGenerator.class);
    private static final String MAX_VALUE = "maxValue";
    private static final String DEFAULT_VALUE = "defaultValue";
    private static final String LITERAL_RETURN = "return this.$L";
    private static final String ATTRIBUTE_KEY = "attribute";
    private final InputStream attributesFile;
    private final File outputFolder;

    public AttributeGenerator(@Nullable InputStream attributesFile, @NotNull File outputFolder) {
        super("net.minestom.server.attribute");
        this.attributesFile = attributesFile;
        this.outputFolder = outputFolder;
    }

    @Override
    public void generate() {
        if (attributesFile == null) {
            LOGGER.error("Failed to find attributes.json.");
            LOGGER.error("Stopped code generation for attributes.");
            return;
        }
        if (!outputFolder.exists() && !outputFolder.mkdirs()) {
            LOGGER.error("Output folder for code generation does not exist and could not be created.");
            return;
        }

        JsonObject attributes = GSON.fromJson(new InputStreamReader(attributesFile), JsonObject.class);
        List<JavaFile> filesToWrite = new ArrayList<>();

        ClassName attributeClassName = ClassName.get(packageName, "Attributes");
        ClassName className = ClassName.get(packageName, "Attribute");
        ClassName minecraftServerCn = ClassName.get("net.minestom.server", "MinecraftServer");
        // Attribute
        TypeSpec.Builder attributeClass = TypeSpec.enumBuilder(attributeClassName)
                .addModifiers(Modifier.PUBLIC).addJavadoc("AUTOGENERATED by " + getClass().getSimpleName());

        // Fields
        attributeClass.addFields(
                List.of(
                        FieldSpec.builder(className, ATTRIBUTE_KEY, Modifier.PRIVATE, Modifier.FINAL).build(),
                        FieldSpec.builder(ArrayTypeName.of(attributeClassName), "VALUES", Modifier.PRIVATE, Modifier.STATIC, Modifier.FINAL).initializer("values()").build()  // Microtus - Banner and shield meta
                )
        );

        attributeClass.addMethods(
                List.of(
                        // Constructor
                        MethodSpec.constructorBuilder()
                                .addParameter(
                                        ParameterSpec.builder(className, ATTRIBUTE_KEY).addAnnotation(NotNull.class).build()
                                )
                                .addStatement(VARIABLE_SETTER, ATTRIBUTE_KEY)
                                .build(),
                        MethodSpec.methodBuilder(ATTRIBUTE_KEY)
                                .addModifiers(Modifier.PUBLIC)
                                .returns(className.annotated(AnnotationSpec.builder(NotNull.class).build()))
                                .addStatement(LITERAL_RETURN, ATTRIBUTE_KEY)
                                .build(),
                        MethodSpec.methodBuilder("getValue")
                                .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                                .addParameter(ParameterSpec.builder(TypeName.INT, "id").build())
                                .addAnnotation(Nullable.class)
                                .returns(className)
                                .addCode("return VALUES[$L].$L;", "id", ATTRIBUTE_KEY)
                                .build(),
                        MethodSpec.methodBuilder("registerAttributes")
                                .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                                .beginControlFlow("for (var $L : VALUES)", "v")
                                .addStatement("$1T.getAttributeManager().register($2L.$3L())", minecraftServerCn, "v", ATTRIBUTE_KEY)
                                .endControlFlow()
                                .build()
                )
        );

        Map<String, String> extractData = new HashMap<>();
        extractData.put("minecraft:", "");
        extractData.put(".", "_");

        // Use data
        for (String key : attributes.keySet()) {
            JsonObject attribute = attributes.getAsJsonObject(key);
            String attributeName = extractNamespaces(key, extractData);
            JsonObject range = attribute.getAsJsonObject("range");
            attributeClass.addEnumConstant(attributeName, TypeSpec.anonymousClassBuilder(
                            "new $T($S, $Lf, $Lf)",
                    className, key, attribute.get(DEFAULT_VALUE).getAsFloat(), range.get(MAX_VALUE).getAsFloat()
                    ).build()
            );
        }


        filesToWrite.add(
                JavaFile.builder(packageName, attributeClass.build())
                        .indent(DEFAULT_INDENT)
                        .skipJavaLangImports(true)
                        .build()
        );

        // Write files to outputFolder
        writeFiles(
                filesToWrite,
                outputFolder
        );
    }
}
